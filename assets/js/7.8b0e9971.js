(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{157:function(e,t,n){"use strict";n.r(t);var a=n(0),i=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),n("p",[e._v("In my previous post about Android library project initialization I wrote how to write our own library or module to support our main application. Look at library dependencies at your gradle script.")]),e._m(1),n("p",[e._v("Above code was an example of a Maven library that we includes in our application.")]),n("p",[e._v("In this post I will talk more about how I publish library to public maven repository such as bintray, maven central, etc so people can start using your library easier with same code format as above code example.")]),n("p",[e._v("Basically if we want to publish a library in maven repository we need to have several things:")]),e._m(2),e._m(3),n("p",[e._v("For library user they will just have define the library like this in their gradle script.")]),e._m(4),n("p",[e._v("Easy, isnâ€™t it? Of course this maven repository was made to realize above dependencies concept in modern Android or Java development.")]),n("p",[e._v("There are several optional things to considerate when publishing library.")]),e._m(5),e._m(6),e._m(7),n("p",[n("strong",[e._v("Note:")]),e._v("\nAbove example was basic usage for Android library Maven publication. For more information about Maven concept you can take a look at "),n("a",{attrs:{href:"https://maven.apache.org/pom.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("this reference"),n("OutboundLink")],1),e._v(".")]),n("p",[e._v("So, now we have grasped the concept behind Android library publication by using "),n("strong",[e._v("Maven")]),e._v(". The next step is to know how we can use its concept in our library so we can publish it and people can start using it. If your Android project was already using gradle and you want to publish it to "),n("a",{attrs:{href:"https://bintray.com/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("bintray")]),n("OutboundLink")],1),e._v(" then this tutorial is relevant to you.")]),e._m(8),n("p",[e._v("Basically you just need to use "),n("code",[e._v("maven-publish")]),e._v(" plugin provided by gradle to make it easier to publish your library. Also you can use bintray plugin if youâ€™re going to publish it on your own bintray repository. Please make account and repository for bintray if you donâ€™t have it. You can read "),n("a",{attrs:{href:"https://www.jfrog.com/knowledge-base/creating-a-new-repository/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Creating a New Repository in Bintray"),n("OutboundLink")],1),e._v(" article to get started on it.")]),e._m(9),n("p",[e._v("After we done the first step then we can start writing publication script in gradle. Below script is an example to publish your library to your bintray repository (credential was obtained in step 1).")]),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),e._m(20),e._m(21),n("p",[e._v("Start your gradle sync process and wait for your library be fetched on your project.")]),e._m(22),e._m(23),e._m(24),n("p",[e._v("Thatâ€™s it from me. Hope it helps you publish your own library so it can be used by other people. Congratulations, you have contributed to community ðŸ˜ƒ")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"publishing-android-library-to-bintray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#publishing-android-library-to-bintray","aria-hidden":"true"}},[this._v("#")]),this._v(" Publishing Android Library to Bintray")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("compile 'com.android.support:appcompat-v7:25.2.0'\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("strong",[e._v("The artifacts")]),e._v(" â†’ binary that we want to publish. For example: "),n("code",[e._v("jar")]),e._v(" (Java library) file, "),n("code",[e._v("aar")]),e._v(" (Android library) file, "),n("code",[e._v("pods")]),e._v(" (iOS library) file.")]),n("li",[n("strong",[e._v("Group identifier")]),e._v(" â†’ publisher identifier. Mostly domain name for easier publisher identification. For example: "),n("code",[e._v("com.domain.sdk")]),e._v(".")]),n("li",[n("strong",[e._v("Artifact identifier")]),e._v(" â†’ library or artifact identifier. Mostly library name for easier library identifier in specific group. For example: "),n("code",[e._v("payment-module")]),e._v(".")]),n("li",[n("strong",[e._v("Version name")]),e._v(" â†’ to identify revision of library. For example: "),n("code",[e._v("1.2.1")]),e._v(".")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Above items was minimum things needed to publish and use the library. In Maven it was included on "),t("code",[this._v("pom.xml")]),this._v(" file. The pom.xml file is the core of a projectâ€™s configuration in Maven. It includes many information to build and use the library project.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("compile 'com.domain.sdk:payment-module:1.2.1'\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("External dependencies â†’ if your library needs another library you can includes it by knowing the group identifier, artifact identifier and also the latest version name.")]),t("li",[this._v("More project details â†’ project name, description, url, licenses, etc. you can define to explain more about your library project.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("So the bare minimum generated "),t("code",[this._v("pom.xml")]),this._v(" file should be like this.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.domain.sdk</groupId>\n  <artifactId>payment-module</artifactId>\n  <version>1.2.1</version>\n  <packaging>aar</packaging>\n  <dependencies>\n    <dependency>\n      <groupId>com.android.support</groupId>\n      <artifactId>appcompat-v7</artifactId>\n      <version>25.2.0</version>\n    </dependency>\n  </dependencies>\n</project>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_1-create-bintray-account-and-repository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-create-bintray-account-and-repository","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. Create Bintray Account and Repository")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_2-create-publication-script"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-create-publication-script","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. Create Publication Script")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("apply plugin: 'com.jfrog.bintray'\napply plugin: 'maven-publish'\npublishing {\n    publications {\n        Production(MavenPublication) {\n            artifact(\"$buildDir/outputs/aar/payment-module-release.aar\")\n            groupId 'com.domain.sdk'\n            artifactId 'payment-module'\n            version '1.2.1'\n\n            //The publication doesn't know about our dependencies, so we have to manually add them to the pom\n            pom.withXml {\n                def dependenciesNode = asNode().appendNode('dependencies')\n\n                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each\n                configurations.compile.allDependencies.each {\n                    def dependencyNode = dependenciesNode.appendNode('dependency')\n                    dependencyNode.appendNode('groupId', it.group)\n                    dependencyNode.appendNode('artifactId', it.name)\n                    dependencyNode.appendNode('version', it.version)\n                }\n            }\n        }\n        Sandbox(MavenPublication) {\n            artifact(\"$buildDir/outputs/aar/corekit-development-release.aar\")\n            groupId 'com.domain.sdk'\n            artifactId 'payment-module'\n            version '1.2.1-SANDBOX'\n\n            //The publication doesn't know about our dependencies, so we have to manually add them to the pom\n            pom.withXml {\n                def dependenciesNode = asNode().appendNode('dependencies')\n\n                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each\n                configurations.compile.allDependencies.each {\n                    def dependencyNode = dependenciesNode.appendNode('dependency')\n                    dependencyNode.appendNode('groupId', it.group)\n                    dependencyNode.appendNode('artifactId', it.name)\n                    dependencyNode.appendNode('version', it.version)\n                }\n            }\n        }    }\n}\nbintray {\n    // Get Bintray credential from environment variable\n    user = System.getenv('BINTRAY_USER') // Get bintray User\n    key = System.getenv('BINTRAY_KEY') // Get bintray Secret Key\n    configurations = ['archives']\n    pkg {\n        repo = 'maven'\n        name = project.name\n        userOrg = 'owner-name'\n        licenses = ['Apache-2.0']\n        desc = 'Payment module SDK'\n        websiteUrl = \"https://domain.com\"\n        publish = true\n    }\n    publications = ['Production', 'Sandbox']\n\n}\n")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("By looking at above script, we know that "),n("code",[e._v("artifact")]),e._v(", "),n("code",[e._v("groupId")]),e._v(", "),n("code",[e._v("artifactId")]),e._v(" and "),n("code",[e._v("version")]),e._v(" is needed to make a Maven publication. Note that we can make "),n("strong",[e._v("several")]),e._v(" publications within a library project. For example if our library can have several flavors such as sandbox and production build. We can make two different maven publications with same group and artifact identifier but with different version name. Sandbox one can have "),n("code",[e._v("-SANDBOX")]),e._v(" suffix on its version.")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Also in above script you will notice that there are some kind of pom related scripts. Normal implementation of "),n("code",[e._v("maven-publish")]),e._v(" plugin will produce basic "),n("code",[e._v("pom.xml")]),e._v(" without external dependencies needed to build our library so we need to add it manually to generated "),n("code",[e._v("pom.xml")]),e._v(" by detecting our dependencies in our gradle script. So our library dependencies such as "),n("code",[e._v("compile 'com.android.support:appcompat-v7:25.2.0'")]),e._v(" will be added to generated "),n("code",[e._v("pom.xml")]),e._v(". Users that use our library will also includes our external library without they even write it explicitly in their application gradle script.")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("Another things that matters when we want to publish the library in bintray was "),n("code",[e._v("bintray")]),e._v(" part. You need to includes your credentials. To make it secure, you can add it by using environment variables. Inside "),n("code",[e._v("pkg")]),e._v(" you can set your project details that will be shown on your bintray page. Also "),n("code",[e._v("publications")]),e._v(" part will define your Maven publication that you want to includes on your bintray repository. In this part I set "),n("code",[e._v("Sandbox")]),e._v(" and "),n("code",[e._v("Production")]),e._v(" in the publications because I want to publish those variants on the bintray. Note that "),n("code",[e._v("Sandbox")]),e._v(" and "),n("code",[e._v("Production")]),e._v(" publications were defined in "),n("code",[e._v("publishing")]),e._v(" â†’ "),n("code",[e._v("publications")]),e._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_3-run-gradle-publication-task"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-run-gradle-publication-task","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. Run Gradle Publication Task")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("After completed previous steps you can start publishing your library by call specific gradle task created for "),t("code",[this._v("bintray")]),this._v(" plugin named "),t("code",[this._v("bintrayUpload")]),this._v(". Please note that the task was located inside your library module (for my example itâ€™s "),t("code",[this._v("payment-module")]),this._v(").")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("> export BINTRAY_USER=YourBintrayUsername\n> export BINTRAY_KEY=YourBintraySecretKey\n> ./gradlew :clean :payment-module:assembleRelease :payment-module:bintrayUpload\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"_4-test-your-published-library"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-test-your-published-library","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. Test your Published Library")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("By completing third step your library now is publicly available on your bintray repository. Please make sure you have added your bintray repository name on your "),t("code",[this._v("repositories")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('repositories {\n    maven { url "http://dl.bintray.com/owner-name/maven" }\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Then on "),t("code",[this._v("dependencies")]),this._v(" we can add our library definition easily.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("compile 'com.domain.sdk:payment-module:1.2.1'\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("strong",[this._v("Notes:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("If your library have external dependencies defined please make sure their source repository was included on "),t("code",[this._v("repositories")]),this._v(" too.\nIf you want to use two different flavors in your project you must define the flavors in your gradle script. Example:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("sandboxCompile 'com.domain.sdk:payment-module:1.2.1-SANDBOX'\nproductionCompile 'com.domain.sdk:payment-module:1.2.1'\n\n")])])])}],!1,null,null,null);t.default=i.exports}}]);