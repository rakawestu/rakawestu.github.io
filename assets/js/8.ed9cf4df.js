(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{158:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),n("p",[e._v("An Android application uses data that come from various data source. Call it Firebase, REST API, SQLite database, Shared preferences.")]),e._m(1),n("p",[e._v("There is no standard about how to made this "),n("em",[e._v("reactive data store")]),e._v(". One of my favorites is using "),n("a",{attrs:{href:"http://reactivex.io/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ReactiveX")]),n("OutboundLink")],1),e._v(" Java or Kotlin version.")]),e._m(2),e._m(3),n("p",[e._v("This is important if we want to implement another key-value based storage using another method.")]),e._m(4),e._m(5),e._m(6),e._m(7),e._m(8),e._m(9),n("p",[e._v("Here is an example of an abstraction of reactive store. We can make a specific store for each data we want to use in our application by implementing below interface.")]),n("p",[e._v("I think the abstract methods are already clear.")]),e._m(10),n("p",[n("strong",[e._v("Note")]),e._v(": If you want to know more about the "),n("code",[e._v("Observable")]),e._v(" concept, please read this documentation of the Rx in "),n("a",{attrs:{href:"http://reactivex.io/documentation/observable.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("this link"),n("OutboundLink")],1),e._v(".")]),e._m(11),n("p",[e._v("For example, we want to store an user data that includes name, email and phone number.")]),n("p",[e._v("First, we create a simple data class of the user.")]),e._m(12),e._m(13),e._m(14),e._m(15),e._m(16),e._m(17),e._m(18),e._m(19),n("p",[e._v("That's it!")]),e._m(20)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"single-data-source-reactive-android-application"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#single-data-source-reactive-android-application","aria-hidden":"true"}},[this._v("#")]),this._v(" Single Data Source Reactive Android Application")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("It's nice if we can maintain it as a "),n("em",[e._v("single data source")]),e._v(" from many data sources and made it "),n("em",[e._v("reactive")]),e._v(". Why "),n("em",[e._v("reactive")]),e._v("? Because if there are changes in the data and screen opening it is showing it, it can automatically refresh the data by showing the latest version. It's "),n("em",[e._v("easier")]),e._v(" than maintaining another mechanism to update the UI manually.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("In this post, I will show you how to make a simple reactive key-value data store using "),t("em",[this._v("Shared Preferences")]),this._v(".")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"make-a-key-value-abstraction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#make-a-key-value-abstraction","aria-hidden":"true"}},[this._v("#")]),this._v(" Make a Key-Value Abstraction")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("interface KeyValueStore {\n    fun putBoolean(key: String, value: Boolean)\n    fun getBoolean(key: String, defaultValue: Boolean): Boolean\n    fun putInt(key: String, value: Int)\n    fun getInt(key: String, defaultValue: Int): Int\n    fun putString(key: String, value: String)\n    fun getString(key: String, defaultValue: String): String\n    fun putFloat(key: String, value: Float)\n    fun getFloat(key: String, defaultValue: Float): Float\n    fun putLong(key: String, value: Long)\n    fun getLong(key: String, defaultValue: Long): Long\n    fun putObject(key: String, `object`: Any)\n    fun <T> getObject(key: String, defaultValue: Any, tClass: Class<T>): T\n    fun putListString(key: String, value: List<String>)\n    fun getListString(key: String, defValue: List<String>): List<String>\n    fun putListObject(key: String, value: List<Any>)\n    fun <T> getListObject(key: String, defValue: List<T>): List<T>\n    fun removeKey(key: String)\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"create-a-shared-preference-api-that-implements-keyvaluestore-interface"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-a-shared-preference-api-that-implements-keyvaluestore-interface","aria-hidden":"true"}},[this._v("#")]),this._v(" Create a Shared Preference API that Implements "),t("code",[this._v("KeyValueStore")]),this._v(" Interface")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("This is an example how a simple shared preferences API that implements the "),t("code",[this._v("KeyValueStore")]),this._v(" interface.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Here, I use "),t("code",[this._v("GSON")]),this._v(" to made it easier to store a custom object to shared preferences by serializing it into a JSON-based string.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import android.content.Context\nimport android.content.SharedPreferences\nimport android.preference.PreferenceManager\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport id.co.spots.app.data.KeyValueStore\nimport org.json.JSONException\n\nclass SharedPreferenceApi(context: Context,\n                          private val gson: Gson) : KeyValueStore {\n    private val sharedPreferences: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)\n    private val editor: SharedPreferences.Editor = sharedPreferences.edit()\n\n    override fun putBoolean(key: String, value: Boolean) {\n        editor\n            .putBoolean(key, value)\n            .apply()\n    }\n\n    override fun getBoolean(key: String, defaultValue: Boolean): Boolean {\n        return sharedPreferences.getBoolean(key, defaultValue)\n    }\n\n    override fun putInt(key: String, value: Int) {\n        editor\n            .putInt(key, value)\n            .apply()\n    }\n\n    override fun getInt(key: String, defaultValue: Int): Int {\n        return sharedPreferences.getInt(key, defaultValue)\n    }\n\n    override fun putString(key: String, value: String) {\n        editor\n            .putString(key, value)\n            .apply()\n    }\n\n    override fun getString(key: String, defaultValue: String): String {\n        return sharedPreferences.getString(key, defaultValue)\n    }\n\n    override fun putFloat(key: String, value: Float) {\n        editor.putFloat(key, value).apply()\n    }\n\n    override fun getFloat(key: String, defaultValue: Float): Float {\n        return sharedPreferences.getFloat(key, defaultValue)\n    }\n\n    override fun putLong(key: String, value: Long) {\n        editor.putLong(key, value).apply()\n    }\n\n    override fun getLong(key: String, defaultValue: Long): Long {\n        return sharedPreferences.getLong(key, defaultValue)\n    }\n\n    override fun putObject(key: String, `object`: Any) {\n        val objectString = convertObjectToString(`object`)\n        putString(key, objectString)\n    }\n\n    override fun <T> getObject(key: String, defaultValue: Any, tClass: Class<T>): T {\n        val defValueString = convertObjectToString(defaultValue)\n        val jsonValue = sharedPreferences.getString(key, defValueString)\n        return convertJsonStringToObject(jsonValue, tClass)\n    }\n\n    private fun <T> convertJsonStringToObject(jsonValue: String, tClass: Class<T>): T {\n        return gson.fromJson(jsonValue, tClass)\n    }\n\n    override fun putListString(key: String, value: List<String>) {\n        putListObject(key, value)\n    }\n\n    @Throws(JSONException::class)\n    override fun getListString(key: String, defValue: List<String>): List<String> {\n        val defValueString = convertObjectToString(defValue)\n        val jsonValue = sharedPreferences.getString(key, defValueString)\n        return convertJsonStringToListString(jsonValue)\n    }\n\n    private fun convertJsonStringToListString(jsonValue: String): List<String> {\n        val type = object : TypeToken<List<String>>() {\n        }.type\n        return gson.fromJson<List<String>>(jsonValue, type)\n    }\n\n    override fun putListObject(key: String, value: List<Any>) {\n        val jsonValue = convertObjectToString(value)\n        editor.putString(key, jsonValue)\n        editor.apply()\n    }\n\n    @Throws(JSONException::class)\n    override fun <T> getListObject(key: String, defValue: List<T>): List<T> {\n        val defValueString = convertObjectToString(defValue)\n        val jsonValue = sharedPreferences.getString(key, defValueString)\n        return convertJsonStringToListObject(jsonValue)\n    }\n\n    private fun convertObjectToString(value: Any): String {\n        return gson.toJson(value)\n    }\n\n    @Throws(JSONException::class)\n    private fun <T> convertJsonStringToListObject(jsonValue: String): List<T> {\n        val typeToken = object : TypeToken<List<T>>() {\n        }.type\n\n        return gson.fromJson<List<T>>(jsonValue, typeToken)\n    }\n\n    override fun removeKey(key: String) {\n        editor.remove(key).apply()\n    }\n}\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"make-an-abstraction-for-a-reactivestore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#make-an-abstraction-for-a-reactivestore","aria-hidden":"true"}},[this._v("#")]),this._v(" Make an Abstraction for a "),t("code",[this._v("ReactiveStore")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import io.reactivex.Completable\nimport io.reactivex.Observable\n\ninterface ReactiveStore<V> {\n    fun get(): Observable<V>\n    fun save(value: V): Completable\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"simple-user-reactive-store-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#simple-user-reactive-store-example","aria-hidden":"true"}},[this._v("#")]),this._v(" Simple User Reactive Store Example")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("data class User(val name: String, val email: String, val phone: String)\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Second, we create a class named "),t("code",[this._v("UserReactiveStore")]),this._v(" that implements "),t("code",[this._v("ReactiveStore")]),this._v(" interface.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("class UserReactiveStore(private val keyValueStore: KeyValueStore) : ReactiveStore<User> {\n    override fun get(): Observable<User> {\n        // To be written\n    }\n\n    override fun save(value: User): Completable {\n        // To be written\n    }\n\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Third, we use "),t("code",[this._v("PublishSubject")]),this._v(" implementation on "),t("code",[this._v("Rx")]),this._v(" to handle the "),t("strong",[this._v("reactive")]),this._v(" part.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('class UserReactiveStore(private val keyValueStore: KeyValueStore) : ReactiveStore<String, User> {\n    private val userSubject: Subject<User> = PublishSubject.create<User>().toSerialized()\n    private val userSavedKey = "SAVED_USER"\n\n    override fun get(): Observable<User> {\n        // The observable of user data is initialized with data from key value storage\n        return userSubject.startWith(\n            keyValueStore.getObject(\n                userSavedKey,\n                User(", ", "), // This is default value if it\'s not saved yet on shared preferences\n                User::class.java\n            )\n        )\n    }\n\n    override fun save(value: User) {\n        return Completable.create { emitter ->\n            // Save to shared preference\n            keyValueStore.putObject(userSavedKey, value)\n            // Notify current subject and the observable returned from `get` method \n            // that it emits a new user value\n            userSubject.onNext(value)\n            // finish the completable\n            emitter.onComplete()\n        }\n    }\n\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("See above code blocks. After the real "),t("code",[this._v("save")]),this._v(" implementation, it notify the subject or the observable based on it so every code that listen to this observable will also be notified when there is change in saved data.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"example-implementation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example-implementation","aria-hidden":"true"}},[this._v("#")]),this._v(" Example implementation")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("val sharedPreferenceApi = SharedPreferenceApi(CONTEXT, GSON)\nval userStore = UserReactiveStore(sharedPreferenceApi)\n\n// Listen to user data changes\n\nuserStore\n    .get()\n    .subscribe(\n        { user -> /*There are changes in user data*/ },\n        { error -> /*Handle error*/ }\n    )\n\n// Save changes\n\nuserStore\n    .save()\n    .subscribe(\n        { /*Save succeeded*/},\n        { error -> /*There is error when saving*/ }\n    )\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("With "),t("code",[this._v("Rx")]),this._v(", you also get a bonus. It's error handler in which case can handle unknown error for example when something bad happened on saved user data.")])}],!1,null,null,null);t.default=r.exports}}]);